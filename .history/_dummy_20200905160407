
  for(var i = 0; i<items.length; i++){
      var itemLayer = items[i].pageItems
      var itemName = itemLayer[0].contents.replace(/[\r\n]+/g, '');
      items[i].name = itemName;
    }



    console.log(`배열 생성 시작`);

var stationsCor = [];
var tmp = [];
var dirNow = path.dirname(require.main.filename);
var ws = fs.createWriteStream(dirNow + "/seoul.csv");

async function makeMap() {
  var corArr = await runApplescript(`tell application "Adobe Illustrator" to do javascript of file "${mapPath}" with arguments {"${dirNow}"}`);
  
  stationsCor = corArr.split(',')
  stationsCor.toString();
  
  Array.prototype.division = function (n) {
    var arr = this;
    var len = arr.length;
    var cnt = Math.floor(len/n) + (Math.floor(len% n)> 0 ? 1 : 0);

    for (var i = 0; i < cnt; i++){
      tmp.push(arr.splice(0, n));
    }
    tmp.unshift(['station','xCor','yCor']);
    return tmp;
  }
  stationsCor.division(3);
  csv.write(tmp, {headers:true}).pipe(ws);

  return;
};




const runApplescript = require('run-applescript');
const path = require("path");
const jsxPath = path.resolve("./readMap2.jsx");
const csv = require("fast-csv");
const fs = require('fs');
const parse = require('csv-parse');

console.log(`배열 생성 시작`);

var csvData =[];
var dirNow = path.dirname(require.main.filename);
fs.createReadStream(dirNow + "/seoulStation.csv")
  .pipe(parse({delimiter: ':'}))
  .on('data', function(csvrow) {
    console.log(csvrow);
    csvData.push(csvrow);
  })
  .on('end', function() {
    console.log(csvData);
  })

var stationsCor = [];
var tmp = [];
var dirNow = path.dirname(require.main.filename);
var ws = fs.createWriteStream(dirNow + "/seoul.csv");

async function makeMap() {
  var corArr = await runApplescript(`tell application "Adobe Illustrator" to do javascript of file "${jsxPath}" with arguments {"${dirNow}"}`);
  
  stationsCor = corArr.split(',')
  stationsCor.toString();
  
  Array.prototype.division = function (n) {
    var arr = this;
    var len = arr.length;
    var cnt = Math.floor(len/n) + (Math.floor(len% n)> 0 ? 1 : 0);

    for (var i = 0; i < cnt; i++){
      tmp.push(arr.splice(0, n));
    }
    tmp.unshift(['station','xCor','yCor']);
    return tmp;
  }
  stationsCor.division(3);
  csv.write(tmp, {headers:true}).pipe(ws);

  return;
};

console.log(`배열 생성 끝`);

module.exports = makeMap; 

// alert(csvArr);

// function formatDesc(str) {
//     var inputLen = str.length,
//         inputArray = str.split(" "),
//         inputArrayLen = inputArray.length,
//         formattedStr = "",
//         curLen = 0,
//         LINE_LENGTH = 27;
//     alert("Your title has " + inputLen + " characters in it.");
//     if(inputLen > 108){
//         alert("that's a long freakin description");
//     }
//     for(var x=0;x<inputArrayLen;x++) {
//         if(curLen + inputArray.length < LINE_LENGTH){
//             formattedStr += " " + inputArray;
//             curLen += inputArray.length + 1;
//         }else{
//             formattedStr += "\n" + inputArray;
//             curLen = inputArray.length;
//         }
//     }
//     return formattedStr;
// } 

// for (z = 0; z < theDocVariables.length; z++) {  
//     if (theDocVariables.name == "coverPageDecriptionLineOne") {  
//         var userInput = getText(titleDescription);
//         var formattedOutput = formatDesc(userInput);
//         alert("result =\n" + formattedOutput);
//     }
// }